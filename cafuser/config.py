from detectron2.config import CfgNode as CN

__all__ = ["add_cafuser_config", "add_deliver_config"]


def add_cafuser_config(cfg):
    """
    Add config for CAFuser.
    """
    # Version Flag
    cfg.CONFIG_VERSION = 1.1

    # update and add to common configs
    cfg.WANDB.PROJECT = "CAFuser"
    cfg.WANDB.NOTES = None
    cfg.WANDB.TAGS = None
    cfg.MODEL.IS_ANALYSIS = False
    cfg.MODEL.TEST.PANOPTIC_ON = True
    cfg.MODEL.TEST.SAVE_PREDICTIONS = CN()
    cfg.MODEL.TEST.SAVE_PREDICTIONS.PANOPTIC = False
    cfg.MODEL.TEST.SAVE_PREDICTIONS.PANOPTIC_CONFIDENCE = False
    cfg.MODEL.TEST.SAVE_PREDICTIONS.CITYSCAPES_COLORS = False
    cfg.MODEL.TEST.MISSING_MOD = [None]

    # Add
    add_multi_modal_config(cfg)
    add_feature_adapter_config(cfg)
    add_fusion_config(cfg)
    add_condition_classifier_config(cfg)
    add_augmentation_config(cfg)

def add_multi_modal_config(cfg):    
    cfg.DATASETS.PIXEL_MEAN = CN()
    cfg.DATASETS.PIXEL_MEAN.CAMERA = [123.675, 116.280, 103.530]
    cfg.DATASETS.PIXEL_MEAN.LIDAR = [4.91737, 6.149373, 0.27025607]
    cfg.DATASETS.PIXEL_MEAN.RADAR = [4.003564, 9.342789, 0.]
    cfg.DATASETS.PIXEL_MEAN.EVENT_CAMERA = [0.12577528, 0.12728328, 0.]
    
    cfg.DATASETS.PIXEL_STD = CN()
    cfg.DATASETS.PIXEL_STD.CAMERA = [58.395, 57.120, 57.375]
    cfg.DATASETS.PIXEL_STD.LIDAR = [13.34715295, 17.63751258, 1.23208644]
    cfg.DATASETS.PIXEL_STD.RADAR = [14.60685343, 19.29406236, 1.] 
    cfg.DATASETS.PIXEL_STD.EVENT_CAMERA = [0.54420582, 0.47625199, 1.]

    # Multi-Modal Support
    cfg.DATASETS.MODALITIES = CN()
    cfg.DATASETS.MODALITIES.MAIN_MODALITY = "CAMERA"
    cfg.DATASETS.MODALITIES.ORDER = ["CAMERA", "LIDAR", "EVENT_CAMERA", "RADAR", "REF_IMAGE"]

    # Camera modality
    cfg.DATASETS.MODALITIES.CAMERA = CN()
    cfg.DATASETS.MODALITIES.CAMERA.LOAD = True
    cfg.DATASETS.MODALITIES.CAMERA.LOAD_PROJECTED = False    
    cfg.DATASETS.MODALITIES.CAMERA.RANDOM_DROP = 0.2
    cfg.DATASETS.MODALITIES.CAMERA.FOLDER = "frame_camera/"
    cfg.DATASETS.MODALITIES.CAMERA.EXTENSION = "frame_camera.png"
    cfg.DATASETS.MODALITIES.CAMERA.DILATION = CN()
    cfg.DATASETS.MODALITIES.CAMERA.DILATION.ENABLED = False
    cfg.DATASETS.MODALITIES.CAMERA.DILATION.KERNAL = None
    cfg.DATASETS.MODALITIES.CAMERA.PROJECTED = CN()
    cfg.DATASETS.MODALITIES.CAMERA.PROJECTED.SCALE_FACTOR = None
    cfg.DATASETS.MODALITIES.CAMERA.PROJECTED.SHIFT_FACTOR = None
    cfg.DATASETS.MODALITIES.CAMERA.PROJECTED.EXTENSION = "frame_camera.png"
    cfg.DATASETS.MODALITIES.CAMERA.PROJECTED.FOLDER = "frame_camera/"

    # Lidar modality
    cfg.DATASETS.MODALITIES.LIDAR = CN()
    cfg.DATASETS.MODALITIES.LIDAR.LOAD = False
    cfg.DATASETS.MODALITIES.LIDAR.LOAD_PROJECTED = False
    cfg.DATASETS.MODALITIES.LIDAR.RANDOM_DROP = 0.2
    cfg.DATASETS.MODALITIES.LIDAR.FOLDER = "lidar/"
    cfg.DATASETS.MODALITIES.LIDAR.EXTENSION = "lidar.bin"
    cfg.DATASETS.MODALITIES.LIDAR.MOTION_COMPENSATION = False
    cfg.DATASETS.MODALITIES.LIDAR.DILATION = CN()
    cfg.DATASETS.MODALITIES.LIDAR.DILATION.ENABLED = True
    cfg.DATASETS.MODALITIES.LIDAR.DILATION.KERNAL = (2, 2)
    cfg.DATASETS.MODALITIES.LIDAR.PROJECTED = CN()
    cfg.DATASETS.MODALITIES.LIDAR.PROJECTED.SCALE_FACTOR = 150.
    cfg.DATASETS.MODALITIES.LIDAR.PROJECTED.SHIFT_FACTOR = 100
    cfg.DATASETS.MODALITIES.LIDAR.PROJECTED.EXTENSION = "lidar_projected.png"
    cfg.DATASETS.MODALITIES.LIDAR.PROJECTED.FOLDER = "projected_to_rgb/lidar/"

    # Define the event_camera modality
    cfg.DATASETS.MODALITIES.EVENT_CAMERA = CN()
    cfg.DATASETS.MODALITIES.EVENT_CAMERA.LOAD = False
    cfg.DATASETS.MODALITIES.EVENT_CAMERA.LOAD_PROJECTED = False  
    cfg.DATASETS.MODALITIES.EVENT_CAMERA.RANDOM_DROP = 0.2
    cfg.DATASETS.MODALITIES.EVENT_CAMERA.FOLDER = "event_camera/"
    cfg.DATASETS.MODALITIES.EVENT_CAMERA.EXTENSION = "event_camera.h5"
    cfg.DATASETS.MODALITIES.EVENT_CAMERA.DILATION = CN()
    cfg.DATASETS.MODALITIES.EVENT_CAMERA.DILATION.ENABLED = True
    cfg.DATASETS.MODALITIES.EVENT_CAMERA.DILATION.KERNAL = (3, 3)
    cfg.DATASETS.MODALITIES.EVENT_CAMERA.PROJECTED = CN()
    cfg.DATASETS.MODALITIES.EVENT_CAMERA.PROJECTED.SCALE_FACTOR = None
    cfg.DATASETS.MODALITIES.EVENT_CAMERA.PROJECTED.SHIFT_FACTOR = None
    cfg.DATASETS.MODALITIES.EVENT_CAMERA.PROJECTED.EXTENSION = "event_camera_projected.png"
    cfg.DATASETS.MODALITIES.EVENT_CAMERA.PROJECTED.FOLDER = "projected_to_rgb/event_camera/"

    # Define the radar modality
    cfg.DATASETS.MODALITIES.RADAR = CN()
    cfg.DATASETS.MODALITIES.RADAR.LOAD = False
    cfg.DATASETS.MODALITIES.RADAR.LOAD_PROJECTED = False
    cfg.DATASETS.MODALITIES.RADAR.RANDOM_DROP = 0.2
    cfg.DATASETS.MODALITIES.RADAR.FOLDER = "radar/"
    cfg.DATASETS.MODALITIES.RADAR.EXTENSION = "radar.png"
    cfg.DATASETS.MODALITIES.RADAR.MOTION_COMPENSATION = True
    cfg.DATASETS.MODALITIES.RADAR.INTENSITY_THRESHOLD = 0
    cfg.DATASETS.MODALITIES.RADAR.MAX_DISTANCE = 150
    cfg.DATASETS.MODALITIES.RADAR.DILATION = CN()
    cfg.DATASETS.MODALITIES.RADAR.DILATION.ENABLED = True
    cfg.DATASETS.MODALITIES.RADAR.DILATION.KERNAL = (10, 10)
    cfg.DATASETS.MODALITIES.RADAR.PROJECTED = CN()
    cfg.DATASETS.MODALITIES.RADAR.PROJECTED.SCALE_FACTOR = 150.
    cfg.DATASETS.MODALITIES.RADAR.PROJECTED.SHIFT_FACTOR = 100
    cfg.DATASETS.MODALITIES.RADAR.PROJECTED.EXTENSION = "radar_projected.png"
    cfg.DATASETS.MODALITIES.RADAR.PROJECTED.FOLDER = "projected_to_rgb/radar/"

    # Define the reference image modality
    cfg.DATASETS.MODALITIES.REF_IMAGE = CN()
    cfg.DATASETS.MODALITIES.REF_IMAGE.LOAD = False
    cfg.DATASETS.MODALITIES.REF_IMAGE.LOAD_PROJECTED = False  
    cfg.DATASETS.MODALITIES.REF_IMAGE.RANDOM_DROP = 0.2
    cfg.DATASETS.MODALITIES.REF_IMAGE.FOLDER = "reference_frame/"
    cfg.DATASETS.MODALITIES.REF_IMAGE.EXTENSION = "reference_frame.png"
    cfg.DATASETS.MODALITIES.REF_IMAGE.DILATION = CN()
    cfg.DATASETS.MODALITIES.REF_IMAGE.DILATION.ENABLED = False
    cfg.DATASETS.MODALITIES.REF_IMAGE.DILATION.KERNAL = None
    cfg.DATASETS.MODALITIES.REF_IMAGE.PROJECTED = CN()
    cfg.DATASETS.MODALITIES.REF_IMAGE.PROJECTED.SCALE_FACTOR = None
    cfg.DATASETS.MODALITIES.REF_IMAGE.PROJECTED.SHIFT_FACTOR = None
    cfg.DATASETS.MODALITIES.REF_IMAGE.PROJECTED.EXTENSION = "reference_frame.png"

    cfg.INPUT.INTERP = "BILINEAR"

def add_feature_adapter_config(cfg):
    """
    Add config for FEATURE_ADAPTER.
    """

    # feature adapter model config
    cfg.MODEL.FEATURE_ADAPTER = CN()

    # Enable adapter config
    cfg.MODEL.FEATURE_ADAPTER.ENABLED = False
    cfg.MODEL.FEATURE_ADAPTER.NAME = "MLPAdapter"

    # WINDOW TRANSFORMER Adapter
    cfg.MODEL.FEATURE_ADAPTER.WINDOW_TRANSFORMER = CN()
    cfg.MODEL.FEATURE_ADAPTER.WINDOW_TRANSFORMER.DROPOUT = 0.1
    cfg.MODEL.FEATURE_ADAPTER.WINDOW_TRANSFORMER.NUM_LAYERS = 2
    cfg.MODEL.FEATURE_ADAPTER.WINDOW_TRANSFORMER.NORMALIZE_BEFORE = False
    cfg.MODEL.FEATURE_ADAPTER.WINDOW_TRANSFORMER.MLP_RATIO = 2
    cfg.MODEL.FEATURE_ADAPTER.WINDOW_TRANSFORMER.NHEAD = [4, 4, 4, 8]
    cfg.MODEL.FEATURE_ADAPTER.WINDOW_TRANSFORMER.WINDOW_SIZE = 7

def add_fusion_config(cfg):
    cfg.MODEL.FUSION = CN()
    cfg.MODEL.FUSION.TYPE = 'WeatherConditionedPCA'
    cfg.MODEL.FUSION.LEVELS = ['res5', 'res4', 'res3', 'res2']

    # PCA configs: If a value is None, we use the featureadapter config instead
    cfg.MODEL.FUSION.PCA = CN()
    cfg.MODEL.FUSION.PCA.DROP_PATH = 0.3
    cfg.MODEL.FUSION.PCA.PROJ_DROP_RATE = 0. 
    cfg.MODEL.FUSION.PCA.ATTN_DROP_RATE = 0.  
    cfg.MODEL.FUSION.PCA.NHEAD = [3, 6, 12, 24]
    cfg.MODEL.FUSION.PCA.WINDOW_SIZE = 7
    cfg.MODEL.FUSION.PCA.MLP_RATIO = 4 
    cfg.MODEL.FUSION.PCA.ATTEND_TO_X_TMP = True
    cfg.MODEL.FUSION.PCA.WITH_PAD_MASK = True    
 
    # Q_c guidance:
    cfg.MODEL.FUSION.QC = CN()
    cfg.MODEL.FUSION.QC.CAT_QC_TO_QUERY = True
    cfg.MODEL.FUSION.QC.CAT_QC_TO_KEY = False
    cfg.MODEL.FUSION.QC.ENABLE_WEATHER_PROJ = True


def add_condition_classifier_config(cfg):
    cfg.MODEL.CONDITION_CLASSIFIER = CN()
    cfg.MODEL.CONDITION_CLASSIFIER.ENABLED = False
    
    cfg.MODEL.CONDITION_CLASSIFIER.CONDITION_SEQ_LEN = 20
    cfg.MODEL.CONDITION_CLASSIFIER.CONDITION_TEXT_ENTRIES = ['condition','time_of_day','precipitation_text', \
        'ground_condition', 'sun_level', 'text']

    # add loos
    cfg.MODEL.ONE_FORMER.CONDITION_WEIGHT = 0.5
    cfg.MODEL.ONE_FORMER.CONDITION_TEMPERATURE = 0.07

    # text encoder config
    cfg.MODEL.CONDITION_CLASSIFIER.TEXT_ENCODER = CN()

    cfg.MODEL.CONDITION_CLASSIFIER.TEXT_ENCODER.ENABLED = True
    cfg.MODEL.CONDITION_CLASSIFIER.TEXT_ENCODER.NAME = 'ConditionTextEncoder'
    cfg.MODEL.CONDITION_CLASSIFIER.TEXT_ENCODER.WIDTH = 256
    cfg.MODEL.CONDITION_CLASSIFIER.TEXT_ENCODER.CONTEXT_LENGTH = 20
    cfg.MODEL.CONDITION_CLASSIFIER.TEXT_ENCODER.NUM_LAYERS = 12
    cfg.MODEL.CONDITION_CLASSIFIER.TEXT_ENCODER.VOCAB_SIZE = 49408
    cfg.MODEL.CONDITION_CLASSIFIER.TEXT_ENCODER.PROJ_NUM_LAYERS = 2
    cfg.MODEL.CONDITION_CLASSIFIER.TEXT_ENCODER.N_CTX = 4

    cfg.MODEL.CONDITION_CLASSIFIER.TEXT_ENCODER.QC_TO_TEXT_PROJECTOR = CN()
    cfg.MODEL.CONDITION_CLASSIFIER.TEXT_ENCODER.QC_TO_TEXT_PROJECTOR.ENABLED = False
    cfg.MODEL.CONDITION_CLASSIFIER.TEXT_ENCODER.QC_TO_TEXT_PROJECTOR.NAME = 'Mlp'
    cfg.MODEL.CONDITION_CLASSIFIER.TEXT_ENCODER.QC_TO_TEXT_PROJECTOR.HIDDEN_FEATURES = 128
    cfg.MODEL.CONDITION_CLASSIFIER.TEXT_ENCODER.QC_TO_TEXT_PROJECTOR.OUT_FEATURES = 20
    cfg.MODEL.CONDITION_CLASSIFIER.TEXT_ENCODER.QC_TO_TEXT_PROJECTOR.DROP = 0.1

    cfg.MODEL.CONDITION_CLASSIFIER.TRANSFORMER = CN()
    cfg.MODEL.CONDITION_CLASSIFIER.TRANSFORMER.NAME = "TransformerConditionClassifier"
    cfg.MODEL.CONDITION_CLASSIFIER.TRANSFORMER.IN_FEATURE = "res5"
    cfg.MODEL.CONDITION_CLASSIFIER.TRANSFORMER.NHEADS = 8
    cfg.MODEL.CONDITION_CLASSIFIER.TRANSFORMER.DROPOUT = 0.1
    cfg.MODEL.CONDITION_CLASSIFIER.TRANSFORMER.DIM_FEEDFORWARD = 2048
    cfg.MODEL.CONDITION_CLASSIFIER.TRANSFORMER.ENC_LAYERS = 2
    cfg.MODEL.CONDITION_CLASSIFIER.TRANSFORMER.DEC_LAYERS = 2
    cfg.MODEL.CONDITION_CLASSIFIER.TRANSFORMER.PRE_NORM = False

    cfg.MODEL.CONDITION_CLASSIFIER.TRANSFORMER.HIDDEN_DIM = 256
    cfg.MODEL.CONDITION_CLASSIFIER.TRANSFORMER.USE_TASK_NORM = True
    cfg.MODEL.CONDITION_CLASSIFIER.TRANSFORMER.IN_MODALITY = 'MAIN'

def add_augmentation_config(cfg):

    cfg.DATASETS.MODALITIES.AUGMENTATIONS = CN()
    cfg.DATASETS.MODALITIES.AUGMENTATIONS.LOAD = False

    cfg.DATASETS.MODALITIES.AUGMENTATIONS.SEED = 0
    cfg.DATASETS.MODALITIES.AUGMENTATIONS.PATCH_AUGMENTATION = CN()
    cfg.DATASETS.MODALITIES.AUGMENTATIONS.PATCH_AUGMENTATION.ENABLED = False
    cfg.DATASETS.MODALITIES.AUGMENTATIONS.PATCH_AUGMENTATION.SCALES = [0.1, 0.2, 0.3]
    cfg.DATASETS.MODALITIES.AUGMENTATIONS.PATCH_AUGMENTATION.PROB_THRESHOLD = 0.1

    cfg.DATASETS.MODALITIES.AUGMENTATIONS.EXTREME_AUGMENTATION = CN()
    cfg.DATASETS.MODALITIES.AUGMENTATIONS.EXTREME_AUGMENTATION.ENABLED = False
    cfg.DATASETS.MODALITIES.AUGMENTATIONS.EXTREME_AUGMENTATION.NUM_PATCHES = 10
    cfg.DATASETS.MODALITIES.AUGMENTATIONS.EXTREME_AUGMENTATION.PATCH_SIZE = 0.1
    cfg.DATASETS.MODALITIES.AUGMENTATIONS.EXTREME_AUGMENTATION.PROB_THRESHOLD = 0.1

    cfg.DATASETS.MODALITIES.AUGMENTATIONS.MIXUP = CN()
    cfg.DATASETS.MODALITIES.AUGMENTATIONS.MIXUP.ENABLED = False
    cfg.DATASETS.MODALITIES.AUGMENTATIONS.MIXUP.ALPHA = 1.
    cfg.DATASETS.MODALITIES.AUGMENTATIONS.MIXUP.PROB_THRESHOLD = 0.1

    cfg.DATASETS.MODALITIES.AUGMENTATIONS.CUTMIX = CN()
    cfg.DATASETS.MODALITIES.AUGMENTATIONS.CUTMIX.ENABLED = False
    cfg.DATASETS.MODALITIES.AUGMENTATIONS.CUTMIX.SCALES = [0.1, 0.2, 0.3]
    cfg.DATASETS.MODALITIES.AUGMENTATIONS.CUTMIX.PROB_THRESHOLD = 0.1

def add_deliver_config(cfg):
    cfg.DATASETS.DELIVER = CN()
    cfg.DATASETS.DELIVER.MODALITIES = ["CAMERA", "LIDAR", "EVENT", "DEPTH"]
    cfg.DATASETS.DELIVER.MAIN_MODALITY = "CAMERA"
    cfg.DATASETS.DELIVER.RANDOM_DROP = [0.2, 0.2, 0.2, 0.2]
    cfg.DATASETS.DELIVER.DILATION = [-1, 3, 3, -1]
    
    cfg.MODEL.FEATURE_ADAPTER.MLP = CN()
    cfg.MODEL.FEATURE_ADAPTER.MLP.REDUCTION = 4

    cfg.DATASETS.DELIVER.PIXEL_MEAN = CN()
    cfg.DATASETS.DELIVER.PIXEL_MEAN.CAMERA = [123.675, 116.280, 103.530]
    cfg.DATASETS.DELIVER.PIXEL_MEAN.LIDAR = [1.7969494, 1.7969494, 1.7969494]
    cfg.DATASETS.DELIVER.PIXEL_MEAN.EVENT =  [17.667162,  0.,       16.789158]
    cfg.DATASETS.DELIVER.PIXEL_MEAN.DEPTH = [110.34616,  66.50577, 117.07793] # HHA
    # cfg.DATASETS.DELIVER.PIXEL_MEAN.DEPTH = [116.9351 116.9351 116.9351] # depth
    
    cfg.DATASETS.DELIVER.PIXEL_STD = CN()
    cfg.DATASETS.DELIVER.PIXEL_STD.CAMERA = [58.395, 57.120, 57.375]
    cfg.DATASETS.DELIVER.PIXEL_STD.LIDAR = [7.78596192, 7.78596192, 7.78596192]
    cfg.DATASETS.DELIVER.PIXEL_STD.EVENT =  [64.75343739,  1.,         63.24056359]
    cfg.DATASETS.DELIVER.PIXEL_STD.DEPTH =  [ 44.36736295,  77.20659029, 105.55149919] # HHA
    # cfg.DATASETS.DELIVER.PIXEL_STD.DEPTH =  [105.70791802 105.70791802 105.70791802] # depth

    # The DeLiVER codebase (https://github.com/jamycheung/DELIVER) evaluates on an 1024x1024 image
    cfg.DATASETS.DELIVER.CMNEXT_EQUIVALENT_EVAL = True
